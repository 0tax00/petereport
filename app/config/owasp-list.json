[
{
    "model": "preport.db_owasp",
    "pk": 1,
    "fields": {
        "owasp_id": "0",
        "owasp_year": "0",
        "owasp_full_id": "0",
        "owasp_name": "Insufficient Information",
        "owasp_description": "There is insufficient information about the issue to classify it; details are unknown or unspecified.",
        "owasp_url": "https://owasp.org/Top10/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 2,
    "fields": {
        "owasp_id": "A01",
        "owasp_year": "2021",
        "owasp_full_id": "A01:2021",
        "owasp_name": "Broken Access Control",
        "owasp_description": "Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits.",
        "owasp_url": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 3,
    "fields": {
        "owasp_id": "A02",
        "owasp_year": "2021",
        "owasp_full_id": "A02:2021",
        "owasp_name": "Cryptographic Failures",
        "owasp_description": "The first thing is to determine the protection needs of data in transit and at rest. For example, passwords, credit card numbers, health records, personal information, and business secrets require extra protection, mainly if that data falls under privacy laws, e.g., EU's General Data Protection Regulation (GDPR), or regulations, e.g., financial data protection such as PCI Data Security Standard (PCI DSS).",
        "owasp_url": "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 4,
    "fields": {
        "owasp_id": "A03",
        "owasp_year": "2021",
        "owasp_full_id": "A03:2021",
        "owasp_name": "Injection",
        "owasp_description": "An application is vulnerable to attack when: 1/ User-supplied data is not validated, filtered, or sanitized by the application. 2/ Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. 3/ Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. 4/ Hostile data is directly used or concatenated. The SQL or command contains the structure and malicious data in dynamic queries, commands, or stored procedures.",
        "owasp_url": "https://owasp.org/Top10/A03_2021-Injection/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 5,
    "fields": {
        "owasp_id": "A04",
        "owasp_year": "2021",
        "owasp_full_id": "A04:2021",
        "owasp_name": "Insecure Design",
        "owasp_description": "Insecure design is a broad category representing different weaknesses, expressed as “missing or ineffective control design.” Insecure design is not the source for all other Top 10 risk categories. There is a difference between insecure design and insecure implementation. We differentiate between design flaws and implementation defects for a reason, they have different root causes and remediation. A secure design can still have implementation defects leading to vulnerabilities that may be exploited. An insecure design cannot be fixed by a perfect implementation as by definition, needed security controls were never created to defend against specific attacks. One of the factors that contribute to insecure design is the lack of business risk profiling inherent in the software or system being developed, and thus the failure to determine what level of security design is required.",
        "owasp_url": "https://owasp.org/Top10/A04_2021-Insecure_Design/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 6,
    "fields": {
        "owasp_id": "A05",
        "owasp_year": "2021",
        "owasp_full_id": "A05:2021",
        "owasp_name": "Security Misconfiguration",
        "owasp_description": "The application might be vulnerable if the application is: 1/ Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. 2/ Unnecessary features are enabled or installed (e.g., unnecessary ports, services, pages, accounts, or privileges). 3/ Default accounts and their passwords are still enabled and unchanged. 4/ Error handling reveals stack traces or other overly informative error messages to users. 5/ For upgraded systems, the latest security features are disabled or not configured securely. 6/ The security settings in the application servers, application frameworks (e.g., Struts, Spring, ASP.NET), libraries, databases, etc., are not set to secure values. 7/ The server does not send security headers or directives, or they are not set to secure values. 8/ The software is out of date or vulnerable (see A06:2021-Vulnerable and Outdated Components). Without a concerted, repeatable application security configuration process, systems are at a higher risk.",
        "owasp_url": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 7,
    "fields": {
        "owasp_id": "A06",
        "owasp_year": "2021",
        "owasp_full_id": "A06:2021",
        "owasp_name": "Vulnerable and Outdated Components",
        "owasp_description": "You are likely vulnerable: 1/ If you do not know the versions of all components you use (both client-side and server-side). This includes components you directly use as well as nested dependencies. 2/ If the software is vulnerable, unsupported, or out of date. This includes the OS, web/application server, database management system (DBMS), applications, APIs and all components, runtime environments, and libraries. 3/ If you do not scan for vulnerabilities regularly and subscribe to security bulletins related to the components you use. 4/ If you do not fix or upgrade the underlying platform, frameworks, and dependencies in a risk-based, timely fashion. This commonly happens in environments when patching is a monthly or quarterly task under change control, leaving organizations open to days or months of unnecessary exposure to fixed vulnerabilities. 5/ If software developers do not test the compatibility of updated, upgraded, or patched libraries. 6/ If you do not secure the components' configurations (see A05:2021-Security Misconfiguration).",
        "owasp_url": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 8,
    "fields": {
        "owasp_id": "A07",
        "owasp_year": "2021",
        "owasp_full_id": "A07:2021",
        "owasp_name": "Identification and Authentication Failures",
        "owasp_description": "Confirmation of the user's identity, authentication, and session management is critical to protect against authentication-related attacks. There may be authentication weaknesses if the application: 1/ Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.2/ Permits brute force or other automated attacks.3/ Permits default, weak, or well-known passwords, such as Password1 or admin/admin.4/ Uses weak or ineffective credential recovery and forgot-password processes, such as knowledge-based answers, which cannot be made safe.5/ Uses plain text, encrypted, or weakly hashed passwords data stores (see A02:2021-Cryptographic Failures). 6/ Has missing or ineffective multi-factor authentication. 7/ Exposes session identifier in the URL. 8/ Reuse session identifier after successful login. 9/ Does not correctly invalidate Session IDs. User sessions or authentication tokens (mainly single sign-on (SSO) tokens) aren't properly invalidated during logout or a period of inactivity.",
        "owasp_url": "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 9,
    "fields": {
        "owasp_id": "A08",
        "owasp_year": "2021",
        "owasp_full_id": "A08:2021",
        "owasp_name": "Software and Data Integrity Failures",
        "owasp_description": "Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization.",
        "owasp_url": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 10,
    "fields": {
        "owasp_id": "A09",
        "owasp_year": "2021",
        "owasp_full_id": "A09:2021",
        "owasp_name": "Security Logging and Monitoring Failures",
        "owasp_description": "Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches. Without logging and monitoring, breaches cannot be detected. Insufficient logging, detection, monitoring, and active response occurs any time: 1/ Auditable events, such as logins, failed logins, and high-value transactions, are not logged. 2/ Warnings and errors generate no, inadequate, or unclear log messages. 3/ Logs of applications and APIs are not monitored for suspicious activity. 4/ Logs are only stored locally. 5/ Appropriate alerting thresholds and response escalation processes are not in place or effective. 6/ Penetration testing and scans by dynamic application security testing (DAST) tools (such as OWASP ZAP) do not trigger alerts. 7/ The application cannot detect, escalate, or alert for active attacks in real-time or near real-time. You are vulnerable to information leakage by making logging and alerting events visible to a user or an attacker (see A01:2021-Broken Access Control).",
        "owasp_url": "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 11,
    "fields": {
        "owasp_id": "A010",
        "owasp_year": "2021",
        "owasp_full_id": "A10:2021",
        "owasp_name": "Server-Side Request Forgery (SSRF)",
        "owasp_description": "SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL). As modern web applications provide end-users with convenient features, fetching a URL becomes a common scenario. As a result, the incidence of SSRF is increasing. Also, the severity of SSRF is becoming higher due to cloud services and the complexity of architectures.",
        "owasp_url": "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 12,
    "fields": {
        "owasp_id": "M1",
        "owasp_year": "2024",
        "owasp_full_id": "M1:2024",
        "owasp_name": "Improper Credential Usage",
        "owasp_description": "Threat Agents\nApplication Specific\n\nThreat agents exploiting hardcoded credentials and improper credential usage in mobile applications can include automated attacks using publicly available or custom-built tools. Such agents could potentially locate and exploit hardcoded credentials or exploit weaknesses due to improper credential usage.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m1-improper-credential-usage.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 13,
    "fields": {
        "owasp_id": "M2",
        "owasp_year": "2024",
        "owasp_full_id": "M2:2024",
        "owasp_name": "Inadequate Supply Chain Security",
        "owasp_description": "Threat Agents\nApplication Specific\n\nAn attacker can manipulate application functionality by exploiting vulnerabilities in the mobile app supply chain. For example, an attacker can insert malicious code into the mobile app’s codebase or modify the code during the build process to introduce backdoors, spyware, or other malicious code.\n\nThis can allow the attacker to steal data, spy on users, or take control of the mobile device. Moreover, an attacker can exploit vulnerabilities in third-party software libraries, SDKs, vendors, or hardcoded credentials to gain access to the mobile app or the backend servers.\n\nThis can lead to unauthorized data access or manipulation, denial of service, or complete takeover of the mobile app or device.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m2-inadequate-supply-chain-security.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 14,
    "fields": {
        "owasp_id": "M3",
        "owasp_year": "2024",
        "owasp_full_id": "M3:2024",
        "owasp_name": "Insecure Authentication/Authorization",
        "owasp_description": "Threat Agents\nApplication Specific\n\nThreat agents that exploit authentication and authorization vulnerabilities typically do so through automated attacks that use available or custom-built tools.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 15,
    "fields": {
        "owasp_id": "M4",
        "owasp_year": "2024",
        "owasp_full_id": "M4:2024",
        "owasp_name": "Insufficient Input/Output Validation",
        "owasp_description": "Threat Agents\nApplication Specific\n\nInsufficient validation and sanitization of data from external sources, such as user inputs or network data, in a mobile application can introduce severe security vulnerabilities. Mobile apps that fail to properly validate and sanitize such data are at risk of being exploited through attacks specific to mobile environments, including SQL injection, Command Injection, and cross-site scripting (XSS) attacks.\n\nThese vulnerabilities can have detrimental consequences, including unauthorized access to sensitive data, manipulation of app functionality, and potential compromise of the entire mobile system.\n\nInadequate output validation can result in data corruption or presentation vulnerabilities, allowing malicious actors to inject malicious code or manipulate sensitive information displayed to users.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 16,
    "fields": {
        "owasp_id": "M5",
        "owasp_year": "2024",
        "owasp_full_id": "M5:2024",
        "owasp_name": "Insecure Communication",
        "owasp_description": "Threat Agents\nApplication Specific\n\nMost modern mobile applications exchange data with one or more remote servers. When the data transmission takes place, it typically goes through the mobile device’s carrier network and the internet, a threat agent listening on the wire can intercept and modify the data if it is transmitted in plaintext or using a deprecated encryption protocol. Threat agents might have different motives such as stealing sensitive information, conducting espionage, identity theft, and more. The following threat agents exist:\n\n- An adversary that shares your local network (compromised or monitored Wi-Fi);\n- Rogue carrier or network devices (routers, cell towers, proxy’s, etc);\n- Malware on your mobile device.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m5-insecure-communication.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 17,
    "fields": {
        "owasp_id": "M6",
        "owasp_year": "2024",
        "owasp_full_id": "M6:2024",
        "owasp_name": "Inadequate Privacy Controls",
        "owasp_description": "Threat Agents\nApplication Specific\n\nPrivacy controls are concerned with protecting Personally Identifiable Information (PII), e.g., names and addresses, credit card information, e-mail and IP addresses, information about health, religion, sexuality, and political opinions.\n\nThis information is valuable to attackers for several reasons. For example, an attacker could:\n\n- Impersonate the victim to commit fraud\n- Misuse the victim’s payment data\n- Blackmail the victim with sensitive information\n- Harm the victim by destroying or manipulating the victim’s critical data\n\nIn general, PII could either be leaked (i.e., a violation of confidentiality), manipulated (violation of integrity), or destroyed/blocked (violation of availability).",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m6-inadequate-privacy-controls.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 18,
    "fields": {
        "owasp_id": "M7",
        "owasp_year": "2024",
        "owasp_full_id": "M7:2024",
        "owasp_name": "Insufficient Binary Protections",
        "owasp_description": "Threat Agents\nApplication Specific\n\nAttackers who target app binaries are motivated by various reasons.\n\nThe binary could contain valuable secrets, such as commercial API keys or hardcoded cryptographic secrets that an attacker could misuse. In addition, the code in the binary could be valuable on its own, for example, because it contains critical business logic or pre-trained AI models. Some attackers might also not target the app itself but use it to explore potential weaknesses of the corresponding backend to prepare for an attack.\n\nBesides collecting information, attackers could also manipulate app binaries to access paid features for free or to bypass other security checks. In the worst case, popular apps could be modified to contain malicious code and be distributed via third-party app stores or under a new name to exploit unsuspecting users. One common attack example is reconfiguring the payment identifiers in an app, repackaging it, and distributing it via app stores. Then, when users download this unauthorized copy from the app store, the attacker receives the payments instead of the original provider.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m7-insufficient-binary-protection.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 19,
    "fields": {
        "owasp_id": "M8",
        "owasp_year": "2024",
        "owasp_full_id": "M8:2024",
        "owasp_name": "Security Misconfiguration",
        "owasp_description": "Threat Agents\nApplication Specific\n\nSecurity misconfiguration in mobile apps refers to the improper configuration of security settings, permissions, and controls that can lead to vulnerabilities and unauthorized access. Threat agents who can exploit security misconfigurations are attackers aiming to gain unauthorized access to sensitive data or perform malicious actions. Threat agents can be an attacker with physical access to the device, a malicious app on the device that exploits security misconfiguration to execute unauthorized actions on the target vulnerable application context.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 20,
    "fields": {
        "owasp_id": "M9",
        "owasp_year": "2024",
        "owasp_full_id": "M9:2024",
        "owasp_name": "Insecure Data Storage",
        "owasp_description": "Threat Agents\nApplication Specific\n\nInsecure data storage in a mobile application can attract various threat agents who aim to exploit the vulnerabilities and gain unauthorized access to sensitive information. These threat agents include skilled adversaries, malicious insiders, state-sponsored actors, cybercriminals, script kiddies, data brokers, competitors, industrial spies, and activists or hacktivists with ideological motives.\n\nThese threat agents exploit vulnerabilities like weak encryption, insufficient data protection, insecure data storage mechanisms, and improper handling of user credentials. It is crucial for mobile app developers and organisations to implement strong security measures, such as robust encryption, secure data storage practices, and adherence to best practices for mobile application security, to mitigate the risks associated with insecure data storage.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m9-insecure-data-storage.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 21,
    "fields": {
        "owasp_id": "M10",
        "owasp_year": "2024",
        "owasp_full_id": "M10:2024",
        "owasp_name": "Insufficient Cryptography",
        "owasp_description": "Threat Agents\nApplication Specific\n\nThreat agents who exploit insecure cryptography in mobile applications can undermine the confidentiality, integrity, and authenticity of sensitive information. These threat agents include attackers who target cryptographic algorithms or implementations to decrypt sensitive data, malicious insiders who manipulate cryptographic processes or leak encryption keys, state-sponsored actors engaged in cryptanalysis for intelligence purposes, cybercriminals who exploit weak encryption to steal valuable data or conduct financial fraud, and attackers who leverage vulnerabilities in cryptographic protocols or libraries.",
        "owasp_url": "https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography.html"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 22,
    "fields": {
        "owasp_id": "ISR01",
        "owasp_year": "2024",
        "owasp_full_id": "ISR01:2024",
        "owasp_name": "Outdated Software",
        "owasp_description": "It is important to keep software updated. Often, updates include security-relevant patches, meaning if a software isn’t up-to-date, it may contain vulnerabilities in its current version state. These vulnerabilities are often publicly known and can be found easily by security scanners. Unfortunately, many companies and end users fail to keep all their software components up-to-date. Due to the lack of updates and update management, many software components and underlying systems become vulnerable over time, with increasing criticality as time passes by.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR01_2024-Outdated_Software"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 23,
    "fields": {
        "owasp_id": "ISR02",
        "owasp_year": "2024",
        "owasp_full_id": "ISR02:2024",
        "owasp_name": "Insufficient Threat Detection",
        "owasp_description": "Threat Detection plays a vital role in cyber defense. In most Cyberattacks, especially internal ones, the first detection of threat actors is too late. Most Cyberattacks get detected once the threat actors perform malicious actions that impact and disturb internal processes or interfere with employee’s work. For example, when ransomware starts to encrypt data on an employee’s computer or an important server. Unfortunately, a detection of a cyberattack in this state is too late. Qualitative threat detection is needed to detect threat actors and malicious activities before they can cause severe damage. Ideally, threat actors should be detected in the initial access phase or, at the latest, in the command and conquer phase.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR02_2024-Insufficient_Threat_Detection"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 24,
    "fields": {
        "owasp_id": "ISR03",
        "owasp_year": "2024",
        "owasp_full_id": "ISR03:2024",
        "owasp_name": "Insecure Configurations",
        "owasp_description": "Insecure configurations represent a critical vulnerability category. These vulnerabilities arise when hardware, software, or network components are not properly set up or configured, exposing them to potential cyber threats. Understanding and addressing insecure configurations is essential to fortify an organization’s defenses against cyberattacks. Addressing these vulnerabilities requires a proactive approach involving regular auditing, robust configuration management, and adherence to security best practices throughout an organization.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR03_2024-Insecure_Configurations"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 25,
    "fields": {
        "owasp_id": "ISR04",
        "owasp_year": "2024",
        "owasp_full_id": "ISR04:2024",
        "owasp_name": "Insecure Resource and User Management",
        "owasp_description": "A big part and challenge of running an IT infrastructure is managing its resources and users. Even more challenging is secure infrastructure. It is mandatory to plan out the resources and access management, like who should have access to what and which user should have which permissions. Questions like: What type of data needs to be stored where and how, must be asked and answered. Most companies rely on centralized resource and user management tools like Active Directory or Microsoft Entra ID. The management of these complex tools itself is challenging. Many vulnerabilities arise when these tools are rolled out without a proper security concept. Besides that, permission and rights management are often neglected and users or technical users have more permissions than they actually need.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR04_2024-Insecure_Resource_and_User_Management"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 26,
    "fields": {
        "owasp_id": "ISR05",
        "owasp_year": "2024",
        "owasp_full_id": "ISR05:2024",
        "owasp_name": "Insecure Use of Cryptography",
        "owasp_description": "Encryption plays an important role in cyber defense. This is well-known for external applications and systems but is often overlooked regarding internal networks and infrastructures. Companies and users have to keep in mind that if they don’t implement sufficient encryption and cryptographic methods on their systems and protocols used in the internal network, an adjacent threat actor may be able to read, modify or inject data into communications and systems. This lack of encryption can lead to data leakage and the compromising of privileged accounts. It is important to remember that a defense line only to the outside doesn’t fully protect the internal systems. As soon as an attacker gains access to the internal network, e.g. via phishing, the outside defense line is mostly obsolete. That is why the security of internal infrastructures has to be as secure as an external system or even more.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR05_2024-Insecure_Use_of_Cryptography"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 27,
    "fields": {
        "owasp_id": "ISR06",
        "owasp_year": "2024",
        "owasp_full_id": "ISR06:2024",
        "owasp_name": "Insecure Network Access Management",
        "owasp_description": "Network Access Management is a fundamental aspect of the architecture of internal infrastructures and the access control regulations. A qualitative Network Access Management prevents a variety of attacks and can reduce the impact of cyberattacks as well as the movement of threat actors inside the internal infrastructure. A more critical and severe risk is the lack of network separation, which would restrict access from one part of the internal infrastructure to others. Often, companies don’t prevent threat actors from accessing the internal network if the attacker manages to get physical access to a network port or Wi-Fi nearby. Additionally, traffic should be supervised and regulated context-based closely to the application layers for communication paths that need to be allowed.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR06_2024-Insecure_Network_Access_Management"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 28,
    "fields": {
        "owasp_id": "ISR07",
        "owasp_year": "2024",
        "owasp_full_id": "ISR07:2024",
        "owasp_name": "Insecure Authentication Methods and Default Credentials",
        "owasp_description": "Passwords are still a fundamental part of cybersecurity, and many Identity and Access Management (IAM) Systems rely on username and password authentication. Insecure Authentication Methods are a common vulnerability in cybersecurity, referring to passwords that are easy to guess or crack due to their simplicity, predictability, or lack of complexity (length). Default credentials preconfigured on hardware devices or software applications by manufacturers or vendors are often left unchanged by users or administrators, creating a security vulnerability.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR07_2024-Insecure_Authentication_Methods_and_Default_Credentials"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 29,
    "fields": {
        "owasp_id": "ISR08",
        "owasp_year": "2024",
        "owasp_full_id": "ISR08:2024",
        "owasp_name": "Information Leakage",
        "owasp_description": "Information leakage occurs when confidential or sensitive data is unintentionally or maliciously exposed, either within or outside an organization, often due to inadequate security measures or personnel negligence. This leakage can manifest in various forms, such as improper disposal of documents, misconfigured permissions on network shares, or unsecured communications channels. Moreover, it could result from insider threats where disgruntled employees or malicious insiders intentionally exfiltrate data for personal gain or sabotage. This threat necessitates a holistic approach encompassing robust access control, data encryption, regular audits, and a culture of security awareness among employees.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR08_2024-Information_Leakage"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 30,
    "fields": {
        "owasp_id": "ISR09",
        "owasp_year": "2024",
        "owasp_full_id": "ISR09:2024",
        "owasp_name": "Insecure Access to Resources and Management Components",
        "owasp_description": "Lack of proper access controls and permissions allows unauthorized individuals or programs to access sensitive data, systems, or physical locations. This vulnerability manifests in misconfigured access policies, overly permissive settings, or improper authentication mechanisms.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR09_2024-Insecure_Access_to_Resources_and_Management_Components"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 31,
    "fields": {
        "owasp_id": "ISR10",
        "owasp_year": "2024",
        "owasp_full_id": "ISR10:2024",
        "owasp_name": "Insufficient Asset Management and Documentation",
        "owasp_description": "Insufficient asset management refers to the shortcomings in an organization’s ability to accurately identify, track, and document all its hardware and software assets, as well as the associated configurations, dependencies, and lifecycles. It encompasses the lack of an organized and up-to-date inventory of IT assets, which is essential for effective security, compliance, and operational efficiency. It enables an easy and fast mapping of affected resources and an accurate incident response.",
        "owasp_url": "https://owasp.org/www-project-top-10-infrastructure-security-risks/docs/2024/ISR10_2024-Insufficient_Asset_Management_and_Documentation"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 32,
    "fields": {
        "owasp_id": "API1",
        "owasp_year": "2023",
        "owasp_full_id": "API1:2023",
        "owasp_name": "Broken Object Level Authorization",
        "owasp_description": "APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface of Object Level Access Control issues. Object level authorization checks should be considered in every function that accesses a data source using an ID from the user.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa1-broken-object-level-authorization/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 33,
    "fields": {
        "owasp_id": "API2",
        "owasp_year": "2023",
        "owasp_full_id": "API2:2023",
        "owasp_name": "Broken Authentication",
        "owasp_description": "Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising a system's ability to identify the client/user, compromises API security overall.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa2-broken-authentication/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 34,
    "fields": {
        "owasp_id": "API3",
        "owasp_year": "2023",
        "owasp_full_id": "API3:2023",
        "owasp_name": "Broken Object Property Level Authorization",
        "owasp_description": "This category combines API3:2019 Excessive Data Exposure and API6:2019 - Mass Assignment, focusing on the root cause: the lack of or improper authorization validation at the object property level. This leads to information exposure or manipulation by unauthorized parties.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa3-broken-object-property-level-authorization/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 35,
    "fields": {
        "owasp_id": "API4",
        "owasp_year": "2023",
        "owasp_full_id": "API4:2023",
        "owasp_name": "Unrestricted Resource Consumption",
        "owasp_description": "Satisfying API requests requires resources such as network bandwidth, CPU, memory, and storage. Other resources such as emails/SMS/phone calls or biometrics validation are made available by service providers via API integrations, and paid for per request. Successful attacks can lead to Denial of Service or an increase of operational costs.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa4-unrestricted-resource-consumption/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 36,
    "fields": {
        "owasp_id": "API5",
        "owasp_year": "2023",
        "owasp_full_id": "API5:2023",
        "owasp_name": "Broken Function Level Authorization",
        "owasp_description": "Complex access control policies with different hierarchies, groups, and roles, and an unclear separation between administrative and regular functions, tend to lead to authorization flaws. By exploiting these issues, attackers can gain access to other users’ resources and/or administrative functions.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa5-broken-function-level-authorization/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 37,
    "fields": {
        "owasp_id": "API6",
        "owasp_year": "2023",
        "owasp_full_id": "API6:2023",
        "owasp_name": "Unrestricted Access to Sensitive Business Flows",
        "owasp_description": "APIs vulnerable to this risk expose a business flow - such as buying a ticket, or posting a comment - without compensating for how the functionality could harm the business if used excessively in an automated manner. This doesn't necessarily come from implementation bugs.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa6-unrestricted-access-to-sensitive-business-flows/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 38,
    "fields": {
        "owasp_id": "API7",
        "owasp_year": "2023",
        "owasp_full_id": "API7:2023",
        "owasp_name": "Server Side Request Forgery",
        "owasp_description": "Server-Side Request Forgery (SSRF) flaws can occur when an API is fetching a remote resource without validating the user-supplied URI. This enables an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa7-server-side-request-forgery/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 39,
    "fields": {
        "owasp_id": "API8",
        "owasp_year": "2023",
        "owasp_full_id": "API8:2023",
        "owasp_name": "Security Misconfiguration",
        "owasp_description": "APIs and the systems supporting them typically contain complex configurations, meant to make the APIs more customizable. Software and DevOps engineers can miss these configurations, or don't follow security best practices when it comes to configuration, opening the door for different types of attacks.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa8-security-misconfiguration/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 40,
    "fields": {
        "owasp_id": "API9",
        "owasp_year": "2023",
        "owasp_full_id": "API9:2023",
        "owasp_name": "Improper Inventory Management",
        "owasp_description": "APIs tend to expose more endpoints than traditional web applications, making proper and updated documentation highly important. A proper inventory of hosts and deployed API versions also are important to mitigate issues such as deprecated API versions and exposed debug endpoints.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xa9-improper-inventory-management/"
    }
},
{
    "model": "preport.db_owasp",
    "pk": 41,
    "fields": {
        "owasp_id": "API10",
        "owasp_year": "2023",
        "owasp_full_id": "API10:2023",
        "owasp_name": "Unsafe Consumption of APIs",
        "owasp_description": "Developers tend to trust data received from third-party APIs more than user input, and so tend to adopt weaker security standards. In order to compromise APIs, attackers go after integrated third-party services instead of trying to compromise the target API directly.",
        "owasp_url": "https://owasp.org/API-Security/editions/2023/en/0xaa-unsafe-consumption-of-apis/"
    }
}
]
